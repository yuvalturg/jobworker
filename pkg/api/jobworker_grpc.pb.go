// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: pkg/api/jobworker.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobWorkerClient is the client API for JobWorker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobWorkerClient interface {
	StartJob(ctx context.Context, in *StartJobRequest, opts ...grpc.CallOption) (*JobResponse, error)
	StopJob(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobResponse, error)
	QueryJob(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobResponse, error)
	StreamJob(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (JobWorker_StreamJobClient, error)
}

type jobWorkerClient struct {
	cc grpc.ClientConnInterface
}

func NewJobWorkerClient(cc grpc.ClientConnInterface) JobWorkerClient {
	return &jobWorkerClient{cc}
}

func (c *jobWorkerClient) StartJob(ctx context.Context, in *StartJobRequest, opts ...grpc.CallOption) (*JobResponse, error) {
	out := new(JobResponse)
	err := c.cc.Invoke(ctx, "/jobworker.JobWorker/StartJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobWorkerClient) StopJob(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobResponse, error) {
	out := new(JobResponse)
	err := c.cc.Invoke(ctx, "/jobworker.JobWorker/StopJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobWorkerClient) QueryJob(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobResponse, error) {
	out := new(JobResponse)
	err := c.cc.Invoke(ctx, "/jobworker.JobWorker/QueryJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobWorkerClient) StreamJob(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (JobWorker_StreamJobClient, error) {
	stream, err := c.cc.NewStream(ctx, &JobWorker_ServiceDesc.Streams[0], "/jobworker.JobWorker/StreamJob", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobWorkerStreamJobClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JobWorker_StreamJobClient interface {
	Recv() (*StreamJobResponse, error)
	grpc.ClientStream
}

type jobWorkerStreamJobClient struct {
	grpc.ClientStream
}

func (x *jobWorkerStreamJobClient) Recv() (*StreamJobResponse, error) {
	m := new(StreamJobResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JobWorkerServer is the server API for JobWorker service.
// All implementations must embed UnimplementedJobWorkerServer
// for forward compatibility
type JobWorkerServer interface {
	StartJob(context.Context, *StartJobRequest) (*JobResponse, error)
	StopJob(context.Context, *JobRequest) (*JobResponse, error)
	QueryJob(context.Context, *JobRequest) (*JobResponse, error)
	StreamJob(*JobRequest, JobWorker_StreamJobServer) error
	mustEmbedUnimplementedJobWorkerServer()
}

// UnimplementedJobWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedJobWorkerServer struct {
}

func (UnimplementedJobWorkerServer) StartJob(context.Context, *StartJobRequest) (*JobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartJob not implemented")
}
func (UnimplementedJobWorkerServer) StopJob(context.Context, *JobRequest) (*JobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopJob not implemented")
}
func (UnimplementedJobWorkerServer) QueryJob(context.Context, *JobRequest) (*JobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryJob not implemented")
}
func (UnimplementedJobWorkerServer) StreamJob(*JobRequest, JobWorker_StreamJobServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamJob not implemented")
}
func (UnimplementedJobWorkerServer) mustEmbedUnimplementedJobWorkerServer() {}

// UnsafeJobWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobWorkerServer will
// result in compilation errors.
type UnsafeJobWorkerServer interface {
	mustEmbedUnimplementedJobWorkerServer()
}

func RegisterJobWorkerServer(s grpc.ServiceRegistrar, srv JobWorkerServer) {
	s.RegisterService(&JobWorker_ServiceDesc, srv)
}

func _JobWorker_StartJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobWorkerServer).StartJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobworker.JobWorker/StartJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobWorkerServer).StartJob(ctx, req.(*StartJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobWorker_StopJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobWorkerServer).StopJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobworker.JobWorker/StopJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobWorkerServer).StopJob(ctx, req.(*JobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobWorker_QueryJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobWorkerServer).QueryJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobworker.JobWorker/QueryJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobWorkerServer).QueryJob(ctx, req.(*JobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobWorker_StreamJob_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JobRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobWorkerServer).StreamJob(m, &jobWorkerStreamJobServer{stream})
}

type JobWorker_StreamJobServer interface {
	Send(*StreamJobResponse) error
	grpc.ServerStream
}

type jobWorkerStreamJobServer struct {
	grpc.ServerStream
}

func (x *jobWorkerStreamJobServer) Send(m *StreamJobResponse) error {
	return x.ServerStream.SendMsg(m)
}

// JobWorker_ServiceDesc is the grpc.ServiceDesc for JobWorker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobWorker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jobworker.JobWorker",
	HandlerType: (*JobWorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartJob",
			Handler:    _JobWorker_StartJob_Handler,
		},
		{
			MethodName: "StopJob",
			Handler:    _JobWorker_StopJob_Handler,
		},
		{
			MethodName: "QueryJob",
			Handler:    _JobWorker_QueryJob_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamJob",
			Handler:       _JobWorker_StreamJob_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/api/jobworker.proto",
}
